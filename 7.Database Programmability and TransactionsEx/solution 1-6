use `soft_uni_programmability`;

-- 1. Employees with Salary Above 35000

delimiter $$
create procedure usp_get_employees_salary_above_35000()
begin
select `first_name`, `last_name`
from `employees`
where `salary` > 35000
order by `first_name`, `last_name`, `employee_id`;
end $$
delimiter ;

-- 2. Employees with Salary Above Number

delimiter $$
create procedure usp_get_employees_salary_above(desired_salary decimal(20,4))
begin
select `first_name`, `last_name`
from `employees`
where `salary` >= `desired_salary`
order by `first_name`, `last_name`, `employee_id`;
end $$
delimiter ;

-- 3. Town Names Starting With

delimiter $$
create procedure usp_get_towns_starting_with(letter char)
begin 
select `name` from `towns`
where substring(`name`, 2) = letter
order by `town_name`;
end $$
delimiter ;

-- 4. Employees from Town

delimiter $$
create procedure usp_get_employees_from_town(`town_param` varchar(50))
begin
select `first_name`, `last_name` from `employees` as e
join `addresses` as a using (`address_id`)
join  `towns` as t using (`town_id`)
where t.`name` = `town_param`
order by `first_name`, `last_name`, `employee_id`;
end $$

delimiter ;

-- 5. Salary Level Function

delimiter $$
create function ufn_get_salary_level(salary decimal(19, 4))
returns varchar(8)
deterministic
begin 
declare `salary_level` varchar(8);
if `salary` < 30000 then set `salary_level` := "Low";
elseif `salary` <= 50000 then set `salary_leve` := "Average";
else set `salary_level` := "High";
end if;
return `salary_level`;
end $$

delimiter ;

-- 6. Employees by Salary Level

delimiter $$
create procedure usp_get_employees_by_salary_level(salary_level varchar(8)) 
begin
select `first_name`, `last_name` from `employees`
where ufn_get_salary_level(salary) like `salary_level`
order by `first_name` desc, `last_name` desc;
end $$
delimiter ;
